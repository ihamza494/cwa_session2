{"version":3,"sources":["DUMMY_NOTES.ts","component/Note/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DUMMY_NOTES","_id","text","link","Note","note","onNoteUpdate","className","onBlur","event","newTextValue","currentTarget","textContent","console","log","updatedNoteObject","contentEditable","suppressContentEditableWarning","href","App","useState","notesList","setnotesList","useEffect","listFromStorageString","localStorage","getItem","listFromStorageArray","JSON","parse","notesListString","stringify","setItem","updateNoteItem","updatedNote","updatedList","map","noteItem","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OACMA,G,MAAuB,CACzB,CAACC,IAAI,IAAMC,KAAK,UAAUC,KAAK,4CAC/B,CAACF,IAAI,IAAIC,KAAK,eAAeC,KAAK,2CAClC,CAACF,IAAI,IAAIC,KAAK,YAAYC,KAAK,4CAC/B,CAACF,IAAI,IAAIC,KAAK,eAAeC,KAAK,2CAClC,CAACF,IAAI,IAAIC,KAAK,UAAUC,KAAK,4CAC7B,CAACF,IAAI,IAAIC,KAAK,eAAeC,KAAK,2CAClC,CAACF,IAAI,IAAIC,KAAK,UAAUC,KAAK,4CAC7B,CAACF,IAAI,IAAIC,KAAK,eAAeC,KAAK,2CAClC,CAACF,IAAI,IAAIC,KAAK,UAAUC,KAAK,4CAC7B,CAACF,IAAI,KAAKC,KAAK,eAAeC,KAAK,6C,sBC4BxBC,EA9BS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAOC,EAAkB,EAAlBA,aAchC,OACE,sBAAKC,UAAU,OAAf,UACE,qBACAC,OAhBkB,SAACC,GACrB,IAAMC,EAAeD,EAAME,cAAcC,YACzC,GAAGF,IAAiBL,EAAKH,KAAzB,CAGAW,QAAQC,IAAI,qBACZ,IAAMC,EAAyB,2BAC1BV,GAD0B,IAE7BH,KAAMQ,GAAgB,MAExBJ,EAAaS,KAOXC,iBAAiB,EACjBC,gCAAgC,EAChCV,UAAU,YAJV,SAKGF,EAAKH,OAER,qBAAKK,UAAU,YAAf,SACE,mBAAGW,KAAMb,EAAKF,KAAd,wBCkCOgB,MA7Df,WAEE,MAAkCC,mBAAgB,IAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAwBC,aAAaC,QAAQ,YACnD,GAAGF,EAAsB,CACvB,IAAMG,EAAuBC,KAAKC,MAAML,GACxCF,EAAaK,QAGfL,EAAatB,KAEZ,IAELuB,qBAAU,WACRV,QAAQC,IAAI,2BACZ,IAAMgB,EAAkBF,KAAKG,UAAUV,GACvCI,aAAaO,QAAQ,WAAYF,KACjC,CAACT,IAWDR,QAAQC,IAAI,eACZD,QAAQC,IAAIO,GAEZ,IAAMY,EAAiB,SAACC,GAElB,IAAMC,EAAcd,EAAUe,KAAI,SAACC,GAC7B,OAAIA,EAASpC,MAAQiC,EAAYjC,IACxBiC,EAEFG,KAIbf,EAAaa,IAEnB,OACE,qBAAK5B,UAAU,MAAf,SACC,qBAAKA,UAAU,aAAf,SACCc,EAAUe,KAAI,SAACC,EAASC,GACvB,OACE,cAAC,EAAD,CAAMjC,KAAQgC,EAAU/B,aAAc2B,GAAqBK,WC1CrDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dfa71163.chunk.js","sourcesContent":["import INote from \"./interfaces/node.interface\";\r\nconst DUMMY_NOTES : INote[]= [\r\n    {_id:\"1\",  text:\"Youtube\",link:\"https://www.youtube.com/user/krishnaik06\"},\r\n    {_id:\"2\",text:\"Ahsan twitch\",link:\"https://www.twitch.tv/videos/1110879245\"},\r\n    {_id:\"3\",text:\"Instagram\",link:\"https://www.youtube.com/user/krishnaik06\"},\r\n    {_id:\"4\",text:\"Ahsan twitch\",link:\"https://www.twitch.tv/videos/1110879245\"},\r\n    {_id:\"5\",text:\"Youtube\",link:\"https://www.youtube.com/user/krishnaik06\"},\r\n    {_id:\"6\",text:\"Ahsan twitch\",link:\"https://www.twitch.tv/videos/1110879245\"},\r\n    {_id:\"7\",text:\"Youtube\",link:\"https://www.youtube.com/user/krishnaik06\"},\r\n    {_id:\"8\",text:\"Ahsan twitch\",link:\"https://www.twitch.tv/videos/1110879245\"},\r\n    {_id:\"9\",text:\"Youtube\",link:\"https://www.youtube.com/user/krishnaik06\"},\r\n    {_id:\"10\",text:\"Ahsan twitch\",link:\"https://www.twitch.tv/videos/1110879245\"},\r\n];\r\n\r\nexport  {DUMMY_NOTES};\r\n\r\n\r\n\r\n\r\n","import { FC, FocusEvent } from \"react\";\r\nimport INote from \"../../interfaces/node.interface\";\r\nimport \"./note.css\";\r\n\r\ntype Props = {\r\n  note: INote;\r\n  onNoteUpdate : (note: INote) => void;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note , onNoteUpdate}) => {\r\n  const noteTextUpdated=(event: FocusEvent<HTMLDivElement>) => {\r\n    const newTextValue = event.currentTarget.textContent\r\n    if(newTextValue === note.text){\r\n      return;\r\n    }\r\n    console.log(\"Note text changed\");\r\n    const updatedNoteObject : INote = {\r\n      ...note,\r\n      text: newTextValue || \" \",\r\n    }\r\n    onNoteUpdate(updatedNoteObject);\r\n\r\n};\r\n  return (\r\n    <div className=\"note\">\r\n      <div \r\n      onBlur= {noteTextUpdated}\r\n      contentEditable={true} \r\n      suppressContentEditableWarning={true} \r\n      className=\"note_Text\">\r\n        {note.text}\r\n      </div>\r\n      <div className=\"note_Link\">\r\n        <a href={note.link}>link</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import './App.css';\n//import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { DUMMY_NOTES } from './DUMMY_NOTES';\nimport Note from './component/Note/Note';\nimport INote from './interfaces/node.interface';\nfunction App() {\n  //let notesList : any[] = []; //js variable doesn't concern with react\n  const [notesList, setnotesList] = useState<any[]>([]);\n//app component renders the first time\n  useEffect(() => {\n    const listFromStorageString = localStorage.getItem('my-notes')\n    if(listFromStorageString){\n      const listFromStorageArray = JSON.parse(listFromStorageString)\n      setnotesList(listFromStorageArray)\n    }\n    else{\n    setnotesList(DUMMY_NOTES);\n    }\n  }, []);\n\nuseEffect(() => {\n  console.log('saved to local storage.')\n  const notesListString = JSON.stringify(notesList)\n  localStorage.setItem('my-notes', notesListString)\n},[notesList])\n  //get notes list method\n//  async function getnotes() {\n  //  try {\n  //    const response = await axios.get('http://localhost:5000/notes');\n    //  setnotesList(response.data.notes);\n  //    console.log(notesList);\n//    } catch (error) {\n  //    console.error(error);\n //   }\n//  }\n  console.log(\"Rerendering\")\n  console.log(notesList)\n\n  const updateNoteItem = (updatedNote : INote) => {\n     \n        const updatedList = notesList.map((noteItem: INote) => {\n              if (noteItem._id === updatedNote._id){\n                return updatedNote;\n              }\n              return noteItem;\n        });\n        //console.log('new list value')\n        //console.log(updatedList)\n        setnotesList(updatedList)\n      }\n  return (\n    <div className=\"App\">\n     <div className=\"notes-List\">\n     {notesList.map((noteItem,index)=> {\n       return (\n         <Note note = {noteItem} onNoteUpdate={updateNoteItem} key={index} />\n       )\n\n     })\n      }\n      </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}